<?xml version="1.0"?>
<!--
Title     : Logic to transform and generate a website from a webfolder
Label     : transfolio.build
Copyright : © 2003, 2004, "ADNX" <http://adnx.org>.
Licence   : "CeCILL" <http://www.cecill.info/licences/Licence_CeCILL_V1.1-US.html> 
            ("GPL" <http://www.gnu.org/copyleft/gpl.html> like)
Creator   : [FG] "Frédéric Glorieux" <frederic.glorieux@ajlsm.com) 
            ("AJLSM" <http://ajlsm.org>)

  = What =

Build a website from an organized webfolder of OpenOffice writer docs
and gallery of images.
Long attention have been paid to dependencies and update.

  = Features =

 * update only what is needed (depend on source documents or transform engine)
 * normalize source documents filenames (JPG > jpg)
 * extract infos from jpg (especially xmp) as a SAX generator
 * link generated XML with a transformation 

  = Changes =

 * 2004-11-05 [FG] for browser compatibility reason, sxw xml is named sxw.xml
 * 2004-11-01 [FG] creation
 

  = References =


 * [conditions] <http://ant.apache.org/manual/CoreTasks/conditions.html>
 * [depend]  <http://ant.apache.org/manual/OptionalTasks/depend.html>
 * [mapper]  <http://ant.apache.org/manual/CoreTypes/mapper.html>
 * [selectors] <http://ant.apache.org/manual/CoreTypes/selectors.html>
 * [antcontrib] <http://ant-contrib.sourceforge.net/tasks/index.html>
 * <http://home.earthlink.net/~russelllear/WebSvcs.html>



-->
<project basedir="." default="test" name="xfolio">
  <taskdef resource="net/sf/antcontrib/antlib.xml"/>
  <!-- the webfolder parameter from the user -->
  <property name="webfolder" location="../docs"/>
  <!-- webfolder is replicated to have absolute path -->
  <property name="src" location="${webfolder}"/>
  <!-- the theme folder to copy to root site -->
  <property name="theme" location="theme/transfolio.org"/>
  <!-- name of generated site by name of the theme folder -->
  <basename property="site" file="${theme}"/>
  <!-- the generated website -->
  <property name="website" location="${src}-${site}"/>
  <!-- 

dev target.

-->
  <target name="test" depends="init, transform, build, toc, html"/>
  <!--
init target
-->
  <target name="init">
    <javac srcdir="lib/classes" destdir="lib/classes"/>
    <taskdef name="xjpeg" classname="AntJpegInfo" classpath="lib/classes"/>
    <taskdef name="norm" classname="AntMoveNormalize" classpath="lib/classes"/>
    <taskdef name="xdir" classname="AntSaxToc" classpath="lib/classes"/>
    <mkdir dir="${website}"/>
    <echo>Your source webfolder ${src}</echo>
    <echo>Your target website ${website}</echo>
    <!-- copy the theme directory -->
    <copy todir="${website}/theme" preservelastmodified="true">
      <fileset dir="${theme}"/>
    </copy>
    <!-- 
update website from deleted files in src 
don't work for extensions identical to generated ones
-->
    <foreach target="delete" param="file">
      <path>
        <fileset dir="${website}">
          <include name="**/*.sxw"/>
          <include name="**/*.jpg"/>
          <include name="**/*.zip"/>
          <exclude name="theme/**"/>
          <!-- CAUTION ! unverifed pattern for internal sxw images -->
          <exclude name="**/1000*.jpg"/>
          <present present="srconly" targetdir="${src}"/>
        </fileset>
      </path>
    </foreach>
    <!-- date from the source sxw is kept, so the marker is *.sxw.xml -->
    <!-- delete all target oo if something have changed in the engine -->
    <dependset>
      <srcfileset dir="transform/sxw">
        <include name="**/*"/>
      </srcfileset>
      <!-- good idea ?
      <srcfilelist dir="${basedir}" files="build.xml"/>
      -->
      <targetfileset dir="${website}">
        <include name="**/*.sxw.xml"/>
        <exclude name="theme/**"/>
      </targetfileset>
    </dependset>
    <!-- jpeg date from the source is kept, so the marker is *.xjpeg -->
    <!-- delete all target rdf if something have changed in the engine -->
    <dependset>
      <srcfileset dir="transform/meta">
        <include name="**/xmp2dc.xsl"/>
      </srcfileset>
      <targetfileset dir="${website}">
        <include name="**/*.xjpeg"/>
        <exclude name="theme/**"/>
      </targetfileset>
    </dependset>
  </target>
  <!--
This target comes after generation of xhtml, rdf, and toc, 
to generate html with updated navigation. 

TODO, better update logic (for now, there's none)
update dependencies are
 - modification in toc.rdf (even if it's only one letter in a title)
 - modification of template
 - transformation
 - source document

-->
  <target name="html" depends="init, normalize, build, toc">
    <!-- sxw : do tasks for files newer in src webfolder than in target website -->
    <foreach target="sxw-html" param="file">
      <path>
        <fileset dir="${src}">
          <include name="**/*.sxw"/>
          <exclude name="**/_*"/>
          <exclude name="**/_*/"/>
<!--
          <depend targetdir="${website}">
            <mapper type="glob" from="*.sxw" to="*.sxw.xml"/>
          </depend>
-->
        </fileset>
      </path>
    </foreach>
  
  </target>

  <!-- 

build target.
TODO : split that.
-->
  <target name="build" depends="init, normalize">
    <!-- sxw : do tasks for files newer in src webfolder than in target website -->
    <foreach target="sxw" param="file">
      <path>
        <fileset dir="${src}">
          <include name="**/*.sxw"/>
          <exclude name="**/_*"/>
          <exclude name="**/_*/"/>
          <depend targetdir="${website}">
            <mapper type="glob" from="*.sxw" to="*.sxw.xml"/>
          </depend>
        </fileset>
      </path>
    </foreach>
    <!-- jpeg : do tasks for files newer in src webfolder than in target website -->
    <foreach target="jpeg" param="file">
      <path>
        <fileset dir="${src}">
          <include name="**/*.jpg"/>
          <exclude name="**/_*"/>
          <exclude name="**/_*/"/>
          <depend targetdir="${website}">
            <mapper type="glob" from="*.jpg" to="*.xjpeg"/>
          </depend>
        </fileset>
      </path>
    </foreach>
    <!-- 
copy resources from src which are not handled upper 
CAUTION : update exclude patterns
-->
    <copy includeEmptyDirs="false" preservelastmodified="true" todir="${website}">
      <fileset dir="${src}">
        <exclude name="**/*.jpg"/>
        <exclude name="**/*.sxw"/>
        <exclude name="**/Thumbs.db"/>
        <exclude name="**/_*"/>
        <exclude name="**/_*/"/>
      </fileset>
    </copy>
  </target>
  <!--
Normalize source directory
-->
  <target name="normalize">
    <!-- select all files from source not yet copied in website and normalize their name -->
    <norm todir="${src}" preservelastmodified="yes" includeemptydirs="false">
      <fileset dir="${src}">
        <present present="srconly" targetdir="${website}"/>
      </fileset>
    </norm>
  </target>
  <!--
this is only a commodity target during development to see effect of selector
in foreach
  -->
  <target name="see">
    <echo>see ${file}</echo>
  </target>
  <!--
Delete files from build and dist when deleted from src
-->
  <target name="delete">
    <!-- get a relative path -->
    <pathconvert targetos="unix" property="path">
      <path>
        <pathelement location="${file}"/>
      </path>
      <map from="${website}" to=""/>
      <mapper type="regexp" from="(.*)\.(.*)$$" to="\1"/>
    </pathconvert>
    <echo>delete ${path}</echo>
    <dirname property="build.dir" file="${website}${path}"/>
    <basename property="build.name" file="${path}"/>
    <delete includeEmptyDirs="true">
      <fileset dir="${build.dir}">
        <include name="${build.name}*"/>
      </fileset>
    </delete>
    <!-- MAYDO more generic one day with dirset -->
    <delete dir="${website}${path}" includeEmptyDirs="true"/>
  </target>
  <!--
work on a jpeg file
-->
  <target name="jpeg">
    <!-- get a relative path -->
    <pathconvert targetos="unix" property="path">
      <path>
        <pathelement location="${file}"/>
      </path>
      <map from="${src}" to=""/>
      <mapper type="regexp" from="(.*)\.(.*)$$" to="\1"/>
    </pathconvert>
    <echo>process "${path}"</echo>
    <copy file="${file}" tofile="${website}${path}.jpg" preservelastmodified="true"/>
    <xjpeg srcfile="${website}${path}.jpg"/>
    <!-- a quite nice text version -->
    <xslt in="${website}${path}.xjpeg" out="${website}${path}.rdf" style="transform/meta/xmp2dc.xsl">
      <param name="path" expression="${path}"/>
      <param name="formats" expression=" jpg html rdf "/>
    </xslt>
  </target>
  <!--
list files in src
-->
  <target name="toc">
    <xdir 
      srcDir="${src}" 
      destFile="${website}/toc.xml" 
      languages="fr en ar"
      formats="sxw jpg" 
      xsl="transform/explorer/explorer.xsl"
      js="theme/explorer.js"    
      css="theme/explorer.css"    
    />

    <xslt in="${website}/toc.xml" out="${website}/toc.rdf" 
    style="transform/transfolio/toc2rdf.xsl">
      <param name="rdfizable" expression=" sxw jpg "/>
    </xslt>

    <xslt in="${website}/toc.xml" out="${website}/toc.html" 
    style="transform/explorer/explorer.xsl">
      <param name="htmlizable" expression=" sxw "/>
      <param name="extension" expression="xhtml"/>
      <param name="css" expression="theme/html.css"/>
      <param name="js" expression="theme/html.js"/>
    </xslt>
  <!-- perhaps a good idea for other, but too heavy
    <echo file="${website}/toc.ant">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</echo>
    <echo file="${website}/toc.ant" append="true">
&lt;?xml-stylesheet type="text/xsl" href="transform/transfolio/filelist2dir.xsl"?&gt;</echo>
    <echo file="${website}/toc.ant" append="true">
&lt;collection path="${src}" &gt;</echo>
    <for param="file">
      <path>
        <fileset dir="${src}/..">
          <exclude name="**/Thumbs.db"/>
        </fileset>
      </path>
      <sequential>
        <pathconvert targetos="unix" property="path">
          <path>
            <pathelement location="@{file}"/>
          </path>
          <map from="${src}" to=""/>
          <mapper type="regexp" from="(.*)\.(.*)$$" to="\1"/>
        </pathconvert>
        <echo file="${website}/toc.ant" append="true">
  &lt;resource path="@{file}"/&gt;</echo>
      </sequential>
    </for>
    <echo file="${website}/toc.ant" append="true">
&lt;/collection&gt;</echo>

-->
  </target>
  <!-- 

sxw files, do job "foreach"

-->
  <target name="sxw">
    <!-- get a relative path -->
    <pathconvert targetos="unix" property="path">
      <path>
        <pathelement location="${file}"/>
      </path>
      <map from="${src}" to=""/>
      <mapper type="regexp" from="(.*)\.(.*)$$" to="\1"/>
    </pathconvert>
    <basename property="basename" file="${path}"/>
    <echo>process "${path}"</echo>
    <copy file="${file}" tofile="${website}${path}.sxw" preservelastmodified="true"/>
    <unzip src="${website}${path}.sxw" dest="${website}${path}.sxw!"/>
    <!-- aggregate OO doc, force because the  *.xml in sxw are not updated-->
    <xslt force="true" in="${website}${path}.sxw!/content.xml" out="${website}${path}.sxw.xml" style="transform/sxw/sxw2sxw.xsl">
      <xmlcatalog>
        <dtd publicId="-//OpenOffice.org//DTD OfficeDocument 1.0//EN" location="schema/dummy.dtd"/>
      </xmlcatalog>
      <param name="meta.xml" expression="meta.xml"/>
      <param name="styles.xml" expression="styles.xml"/>
      <param name="xsl" expression="/transform/sxw/sxw2html.xsl"/>
      <param name="css" expression="/theme/html.css"/>
      <param name="path" expression="${path}.sxw.xml"/>
      <param name="pictures" expression="${basename}/"/>
    </xslt>
    <!-- extract meta for an RDF -->
    <xslt in="${website}${path}.sxw.xml" out="${website}${path}.rdf" style="transform/sxw/sxw2rdf.xsl">
      <param name="path" expression="${path}"/>
      <!-- other extensions for which a transformation is expected -->
      <param name="formats" expression=" sxw html txt rdf "/>
    </xslt>
    <!-- a quite nice text version -->
    <xslt in="${website}${path}.sxw.xml" out="${website}${path}.txt" style="transform/sxw/sxw2txt.xsl"/>
    <!-- a clean xhtml without navigation -->
    <xslt in="${website}${path}.sxw.xml" out="${website}${path}.xhtml" style="transform/sxw/sxw2html.xsl">
      <!-- target path of this transformation, used to resolve links -->
      <param name="path" expression="${path}.xhtml"/>
      <param name="css" expression="/theme/html.css"/>
    </xslt>
    <!-- a docbook -->
    <!--
    <xslt in="${website}${path}.sxw.xml" out="${website}${path}.dbx" style="transform/sxw/sxw2dbx.xsl">
      <param name="path" expression="${path}.xhtml"/>
      <param name="css" expression="/theme/html.css"/>
    </xslt>
    -->
    <!-- flatten pictures -->
    <copy todir="${website}${path}" flatten="true" includeEmptyDirs="false" preservelastmodified="true">
      <fileset dir="${website}${path}.sxw!">
        <exclude name="**/*.xml"/>
        <exclude name="mimetype"/>
        <exclude name="layout-cache"/>
      </fileset>
    </copy>
    <!-- unzip folder should be deletable -->
    <delete dir="${website}${path}.sxw!"/>
  </target>
  <!-- 
sxw, build html version with globale rdf for navigation 

-->
  <target name="sxw-html">
     <!-- get a relative path -->
    <pathconvert targetos="unix" property="path">
      <path>
        <pathelement location="${file}"/>
      </path>
      <map from="${src}" to=""/>
      <mapper type="regexp" from="(.*)\.(.*)$$" to="\1"/>
    </pathconvert>
    <!-- html with navigation from clean xhtml and global rdf, force it to rewrite navigation -->
    <xslt
      force="true" 
      in="${website}${path}.xhtml" 
      out="${website}${path}.html" 
      style="transform/transfolio/html-template.xsl">
      <!-- target path of this transformation, used to resolve links -->
      <param name="path" expression="${path}.sxw"/>
      <!-- theme directory resolved from path where to find "template.xhtml" 
and it's resources (like CSS or images) -->
      <param name="theme-path" expression="/theme/"/>
    </xslt>
 
  </target>
  <!-- prepare a nice export of the transform pack -->
  <target name="transform">
    <mkdir dir="transform/explorer/classes"/>
    <javac srcdir="transform/explorer/java" destdir="transform/explorer/classes"/>
    <!-- a test to see if a local task compile is working -->
    <taskdef name="xdir" classname="org.transfolio.ant.AntXmlDirectory" 
    classpath="transform/explorer/classes"/>
    <!-- copy the transform pack (for direct xml view) -->
    <copy todir="${website}/transform" includeEmptyDirs="false" preservelastmodified="true">
      <fileset dir="transform" >
        <exclude name="**/*.java"/>
        <exclude name="**/*.class"/>
      </fileset>
    </copy>
    <xdir 
      srcDir="transform" 
      destFile="${website}/transform/index.xml" 
      xsl="explorer/explorer.xsl"
      js="explorer/explorer.js"    
      css="explorer/explorer.css"    
      formats="jpg png gif" 
    />
    <xdir 
      srcDir="transform/explorer" 
      destFile="${website}/transform/explorer/index.xml" 
      xsl="explorer.xsl"
      js="explorer.js"    
      css="explorer.css"    
      formats="jpg png gif" 
    />
    <xslt 
      in="${website}/transform/explorer/index.xml" 
      out="${website}/transform/explorer/index.html" 
      style="transform/explorer/explorer.xsl">
      <param name="css" expression="explorer.css"/>
      <param name="js" expression="explorer.js"/>
    </xslt>
    
  </target>

</project>
