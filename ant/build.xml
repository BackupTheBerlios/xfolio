<?xml version="1.0"?>
<!--

Copyright 2003-2004 ADNX <http://adnx.org>

  = WHAT =

Build a website from on organized webfolder of OpenOffice writer docs
and gallery of images.
Long attention have been paid to dependencies and update.

  = WHO =

[FG] "Frédéric Glorieux" <frederic.glorieux@ajlsm.com>

  = FEATURES =

 * update only what is needed
 * renaming of bad extensions 

  = MAYDO =

 * Depend update on xslt changes.
 * rename files to ASCII (issue on depends !)
 * delete empty dirs in website


  = REFERENCES =


 * [conditions] <http://ant.apache.org/manual/CoreTasks/conditions.html>
 * [depend]  <http://ant.apache.org/manual/OptionalTasks/depend.html>
 * [mapper]  <http://ant.apache.org/manual/CoreTypes/mapper.html>
 * [selectors] <http://ant.apache.org/manual/CoreTypes/selectors.html>
 * [antcontrib] <http://ant-contrib.sourceforge.net/tasks/index.html>
 * <http://home.earthlink.net/~russelllear/WebSvcs.html>



-->
<project basedir="." default="test" name="xfolio">
  <taskdef resource="net/sf/antcontrib/antlib.xml"/>
  <!-- the webfolder parameter from the user -->
  <property name="webfolder" location="../docs"/>
  <!-- webfolder is replicated to have absolute path -->
  <property name="src" location="${webfolder}"/>
  <!-- a delelable work folder where to store enough for caching -->
  <property name="website" location="${src}-website"/>
  <!-- the skin folder to copy to root site -->
  <property name="skin" location="skin/xfolio.org"/>
  <!-- 

dev target.

-->
  <target name="test" depends="init, build"/>
  <!--
init target
-->
  <target name="init">
    <javac srcdir="lib/classes" destdir="lib/classes"/>
    <taskdef name="xjpeg" classname="AntJpegInfo" classpath="lib/classes"/>
    <mkdir dir="${website}"/>
  </target>
  <!-- 

build target.

-->
  <target name="build" depends="init, normalize, directory">
    <echo>Your source webfolder ${src}</echo>
    <echo>Your target website ${website}</echo>
    <!-- copy the skin directory -->
    <copy todir="${website}/skin" preservelastmodified="true">
      <fileset dir="${skin}"/>
    </copy>
    <!-- 
update website from deleted files in src 
don't work for extensions identical to generated ones
-->
    <foreach target="delete" param="file">
      <path>
        <fileset dir="${website}">
          <include name="**/*.sxw"/>
          <include name="**/*.jpg"/>
          <include name="**/*.zip"/>
          <exclude name="skin/**"/>
          <!-- CAUTION ! unverifed pattern for internal files -->
          <exclude name="**/1000*.jpg"/>
          <present present="srconly" targetdir="${src}"/>
        </fileset>
      </path>
    </foreach>
    <!-- date from the source sxw is kept, so the marker is *.oo -->
    <!-- delete all target oo if something have changed in the engine -->
    <dependset>
      <srcfileset dir="transform/OOo">
        <include name="**/*"/>
      </srcfileset>
      <!-- good idea ?
      <srcfilelist dir="${basedir}" files="build.xml"/>
      -->
      <targetfileset dir="${website}">
        <include name="**/*.oo"/>
        <exclude name="skin/**"/>
      </targetfileset>
    </dependset>
    <!-- sxw : do tasks for files newer in src webfolder than in target website -->
    <foreach target="sxw" param="file">
      <path>
        <fileset dir="${src}">
          <include name="**/*.sxw"/>
          <depend targetdir="${website}">
            <mapper type="glob" from="*.sxw" to="*.oo"/>
          </depend>
        </fileset>
      </path>
    </foreach>
    <!-- jpeg date from the source is kept, so the marker is *.xjpeg -->
    <!-- delete all target rdf if something have changed in the engine -->
    <dependset>
      <srcfileset dir="transform/meta">
        <include name="**/xmp2dc.xsl"/>
      </srcfileset>
      <targetfileset dir="${website}">
        <include name="**/*.xjpeg"/>
        <exclude name="skin/**"/>
      </targetfileset>
    </dependset>
    <!-- jpeg : do tasks for files newer in src webfolder than in target website -->
    <foreach target="jpeg" param="file">
      <path>
        <fileset dir="${src}">
          <include name="**/*.jpg"/>
          <depend targetdir="${website}">
            <mapper type="glob" from="*.jpg" to="*.xjpeg"/>
          </depend>
        </fileset>
      </path>
    </foreach>
    <!-- 
copy resources from src which are not handled upper 
CAUTION : update exclude patterns
-->
    <copy includeEmptyDirs="false" preservelastmodified="true" todir="${website}">
      <fileset dir="${src}">
        <exclude name="**/*.jpg"/>
        <exclude name="**/*.sxw"/>
        <exclude name="**/Thumbs.db"/>
      </fileset>
    </copy>
  </target>
  <!--
Normalize source directory
-->
  <target name="normalize">
    <move todir="${src}" preservelastmodified="yes" includeemptydirs="false">
      <fileset dir="${src}">
        <include name="**/*.JPG"/>
      </fileset>
      <mapper type="glob" from="*.JPG" to="*.jpeg"/>
    </move>
    <!-- because of a bug in windows system between case names -->
    <move todir="${src}" preservelastmodified="yes" includeemptydirs="false">
      <fileset dir="${src}">
        <include name="**/*.jpeg"/>
      </fileset>
      <mapper type="glob" from="*.jpeg" to="*.jpg"/>
    </move>
  </target>
  <!--
this is only a commodity target during development to see effect of selector
in foreach
  -->
  <target name="see">
    <echo>see ${file}</echo>
  </target>
  <!--
Delete files from build and dist when deleted from src
-->
  <target name="delete">
    <!-- get a relative path -->
    <pathconvert targetos="unix" property="path">
      <path>
        <pathelement location="${file}"/>
      </path>
      <map from="${website}" to=""/>
      <mapper type="regexp" from="(.*)\.(.*)$$" to="\1"/>
    </pathconvert>
    <echo>delete ${path}</echo>
    <dirname property="build.dir" file="${website}${path}"/>
    <basename property="build.name" file="${path}"/>
    <delete includeEmptyDirs="true">
      <fileset dir="${build.dir}">
        <include name="${build.name}*"/>
      </fileset>
    </delete>
    <!-- MAYDO more generic one day with dirset -->
    <delete dir="${website}${path}" includeEmptyDirs="true"/>
  </target>
  <!--
work on a jpeg file
-->
  <target name="jpeg">
    <!-- get a relative path -->
    <pathconvert targetos="unix" property="path">
      <path>
        <pathelement location="${file}"/>
      </path>
      <map from="${src}" to=""/>
      <mapper type="regexp" from="(.*)\.(.*)$$" to="\1"/>
    </pathconvert>
    <echo>process "${path}"</echo>
    <copy file="${file}" tofile="${website}${path}.jpg" preservelastmodified="true"/>
    <xjpeg srcfile="${website}${path}.jpg"/>
    <!-- a quite nice text version -->
    <xslt in="${website}${path}.xjpeg" out="${website}${path}.rdf" style="transform/meta/xmp2dc.xsl"/>
    
  </target>
  <!--
list files in src
-->
  <target name="directory">
    <echo file="${website}/toc.ant">&lt;directory&gt;</echo>
    <for param="file">
      <path>
        <fileset dir="${src}">
          <exclude name="**/Thumbs.db"/>
        </fileset>
      </path>
      <sequential>
        <echo file="${website}/toc.ant" append="true">
  &lt;file path="@{file}"/&gt;</echo>
      </sequential>
    </for>
    <echo file="${website}/toc.ant" append="true">
&lt;/directory&gt;</echo>
  </target>
  <!-- 

sxw files, do job "foreach"

-->
  <target name="sxw">
    <!-- get a relative path -->
    <pathconvert targetos="unix" property="path">
      <path>
        <pathelement location="${file}"/>
      </path>
      <map from="${src}" to=""/>
      <mapper type="regexp" from="(.*)\.(.*)$$" to="\1"/>
    </pathconvert>
    <echo>process "${path}"</echo>
    <copy file="${file}" tofile="${website}${path}.sxw" preservelastmodified="true"/>
    <unzip src="${website}${path}.sxw" dest="${website}${path}.sxw!"/>
    <!-- aggregate OO doc, force because the  *.xml in sxw are not updated-->
    <xslt force="true" in="${website}${path}.sxw!/content.xml" out="${website}${path}.oo" style="transform/OOo/sxw2sxw.xsl">
      <xmlcatalog>
        <dtd publicId="-//OpenOffice.org//DTD OfficeDocument 1.0//EN" location="schema/dummy.dtd"/>
      </xmlcatalog>
      <param name="meta.xml" expression="meta.xml"/>
      <param name="styles.xml" expression="styles.xml"/>
    </xslt>
    <!-- extract meta for an RDF -->
    <xslt in="${website}${path}.oo" out="${website}${path}.rdf" style="transform/OOo/sxw2rdf.xsl">
      <param name="path" expression="${file}"/>
    </xslt>
    <!-- a quite nice text version -->
    <xslt in="${website}${path}.oo" out="${website}${path}.txt" style="transform/OOo/sxw2txt.xsl"/>
    <!-- an clean xhtml without navigation -->
    <xslt in="${website}${path}.oo" out="${website}${path}.xhtml" style="transform/OOo/sxw2html.xsl">
      <param name="path" expression="${path}"/>
      <param name="css" expression="/skin/html.css"/>
    </xslt>
    <!-- flatten pictures -->
    <copy todir="${website}${path}">
      <fileset dir="${website}${path}.sxw!/Pictures"/>
    </copy>
    <!-- unzip folder should be deletable -->
    <delete dir="${website}${path}.sxw!"/>
  </target>
</project>
